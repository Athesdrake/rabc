use num_derive::{FromPrimitive, ToPrimitive};
use num_traits::FromPrimitive;
use std::fmt::Display;

#[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, FromPrimitive, ToPrimitive)]
pub enum OpCode {
    Bkpt = 0x01,
    Nop = 0x02,
    Throw = 0x03,
    GetSuper = 0x04,
    SetSuper = 0x05,
    Dxns = 0x06,
    DxnsLate = 0x07,
    Kill = 0x08,
    Label = 0x09,
    Lf32x4 = 0x0A,
    Sf32x4 = 0x0B,
    IfNlt = 0x0C,
    IfNle = 0x0D,
    IfNgt = 0x0E,
    IfNge = 0x0F,
    Jump = 0x10,
    IfTrue = 0x11,
    IfFalse = 0x12,
    IfEq = 0x13,
    IfNe = 0x14,
    IfLt = 0x15,
    IfLe = 0x16,
    IfGt = 0x17,
    IfGe = 0x18,
    IfStrictEq = 0x19,
    IfStrictNe = 0x1A,
    LookupSwitch = 0x1B,
    PushWith = 0x1C,
    PopScope = 0x1D,
    NextName = 0x1E,
    HasNext = 0x1F,
    PushNull = 0x20,
    PushUndefined = 0x21,
    PushFloat = 0x22,
    NextValue = 0x23,
    PushByte = 0x24,
    PushShort = 0x25,
    PushTrue = 0x26,
    PushFalse = 0x27,
    PushNan = 0x28,
    Pop = 0x29,
    Dup = 0x2A,
    Swap = 0x2B,
    PushString = 0x2C,
    PushInt = 0x2D,
    PushUint = 0x2E,
    PushDouble = 0x2F,
    PushScope = 0x30,
    PushNamespace = 0x31,
    HasNext2 = 0x32,
    Li8 = 0x35,
    Li16 = 0x36,
    Li32 = 0x37,
    Lf32 = 0x38,
    Lf64 = 0x39,
    Si8 = 0x3A,
    Si16 = 0x3B,
    Si32 = 0x3C,
    Sf32 = 0x3D,
    Sf64 = 0x3E,
    NewFunction = 0x40,
    Call = 0x41,
    Construct = 0x42,
    CallMethod = 0x43,
    CallStatic = 0x44,
    CallSuper = 0x45,
    CallProperty = 0x46,
    ReturnVoid = 0x47,
    ReturnValue = 0x48,
    ConstructSuper = 0x49,
    ConstructProp = 0x4A,
    CallPropLex = 0x4C,
    CallSuperVoid = 0x4E,
    CallPropVoid = 0x4F,
    Sxi1 = 0x50,
    Sxi8 = 0x51,
    Sxi16 = 0x52,
    ApplyType = 0x53,
    PushFloat4 = 0x54,
    NewObject = 0x55,
    NewArray = 0x56,
    NewActivation = 0x57,
    NewClass = 0x58,
    GetDescendants = 0x59,
    NewCatch = 0x5A,
    FindPropstrict = 0x5D,
    FindProperty = 0x5E,
    FindDef = 0x5F,
    GetLex = 0x60,
    SetProperty = 0x61,
    GetLocal = 0x62,
    SetLocal = 0x63,
    GetGlobalScope = 0x64,
    GetScopeObject = 0x65,
    GetProperty = 0x66,
    GetOuterScope = 0x67,
    InitProperty = 0x68,
    DeleteProperty = 0x6A,
    GetSlot = 0x6C,
    SetSlot = 0x6D,
    GetGlobalSlot = 0x6E,
    SetGlobalSlot = 0x6F,
    ConvertS = 0x70,
    EscXElem = 0x71,
    EscXAttr = 0x72,
    ConvertI = 0x73,
    ConvertU = 0x74,
    ConvertD = 0x75,
    ConvertB = 0x76,
    ConvertO = 0x77,
    CheckFilter = 0x78,
    ConvertF = 0x79,
    UnPlus = 0x7A,
    ConvertF4 = 0x7B,
    Coerce = 0x80,
    CoerceB = 0x81,
    CoerceA = 0x82,
    CoerceI = 0x83,
    CoerceD = 0x84,
    CoerceS = 0x85,
    AsType = 0x86,
    AsTypeLate = 0x87,
    CoerceU = 0x88,
    CoerceO = 0x89,
    Negate = 0x90,
    Increment = 0x91,
    IncLocal = 0x92,
    Decrement = 0x93,
    DecLocal = 0x94,
    TypeOf = 0x95,
    Not = 0x96,
    BitNot = 0x97,
    Add = 0xA0,
    Subtract = 0xA1,
    Multiply = 0xA2,
    Divide = 0xA3,
    Modulo = 0xA4,
    LShift = 0xA5,
    RShift = 0xA6,
    UrShift = 0xA7,
    BitAnd = 0xA8,
    BitOr = 0xA9,
    BitXor = 0xAA,
    Equals = 0xAB,
    StrictEquals = 0xAC,
    LessThan = 0xAD,
    LessEquals = 0xAE,
    GreaterThan = 0xAF,
    GreaterEquals = 0xB0,
    InstanceOf = 0xB1,
    IsType = 0xB2,
    IsTypeLate = 0xB3,
    In = 0xB4,
    IncrementI = 0xC0,
    DecrementI = 0xC1,
    IncLocalI = 0xC2,
    DecLocalI = 0xC3,
    NegateI = 0xC4,
    AddI = 0xC5,
    SubtractI = 0xC6,
    MultiplyI = 0xC7,
    GetLocal0 = 0xD0,
    GetLocal1 = 0xD1,
    GetLocal2 = 0xD2,
    GetLocal3 = 0xD3,
    SetLocal0 = 0xD4,
    SetLocal1 = 0xD5,
    SetLocal2 = 0xD6,
    SetLocal3 = 0xD7,
    Debug = 0xEF,
    DebugLine = 0xF0,
    DebugFile = 0xF1,
    BkptLine = 0xF2,
}

impl OpCode {
    #[inline]
    pub fn from_u8(value: u8) -> Option<Self> {
        FromPrimitive::from_u8(value)
    }

    pub fn name(&self) -> String {
        match self {
            OpCode::Bkpt => "bkpt",
            OpCode::Nop => "nop",
            OpCode::Throw => "throw",
            OpCode::GetSuper => "getsuper",
            OpCode::SetSuper => "setsuper",
            OpCode::Dxns => "dxns",
            OpCode::DxnsLate => "dxnslate",
            OpCode::Kill => "kill",
            OpCode::Label => "label",
            OpCode::Lf32x4 => "lf32x4",
            OpCode::Sf32x4 => "sf32x4",
            OpCode::IfNlt => "ifn_lt",
            OpCode::IfNle => "ifn_le",
            OpCode::IfNgt => "ifn_gt",
            OpCode::IfNge => "ifn_ge",
            OpCode::Jump => "jump",
            OpCode::IfTrue => "iftrue",
            OpCode::IfFalse => "iffalse",
            OpCode::IfEq => "ifeq",
            OpCode::IfNe => "ifn_e",
            OpCode::IfLt => "iflt",
            OpCode::IfLe => "ifle",
            OpCode::IfGt => "ifgt",
            OpCode::IfGe => "ifge",
            OpCode::IfStrictEq => "ifstricteq",
            OpCode::IfStrictNe => "ifstrictne",
            OpCode::LookupSwitch => "lookupswitch",
            OpCode::PushWith => "pushwith",
            OpCode::PopScope => "popscope",
            OpCode::NextName => "nextname",
            OpCode::HasNext => "hasnext",
            OpCode::PushNull => "pushnull",
            OpCode::PushUndefined => "pushundefined",
            OpCode::PushFloat => "pushfloat",
            OpCode::NextValue => "nextvalue",
            OpCode::PushByte => "pushbyte",
            OpCode::PushShort => "pushshort",
            OpCode::PushTrue => "pushtrue",
            OpCode::PushFalse => "pushfalse",
            OpCode::PushNan => "pushnan",
            OpCode::Pop => "pop",
            OpCode::Dup => "dup",
            OpCode::Swap => "swap",
            OpCode::PushString => "pushstring",
            OpCode::PushInt => "pushint",
            OpCode::PushUint => "pushuint",
            OpCode::PushDouble => "pushdouble",
            OpCode::PushScope => "pushscope",
            OpCode::PushNamespace => "pushnamespace",
            OpCode::HasNext2 => "hasnext2",
            OpCode::Li8 => "li8",
            OpCode::Li16 => "li16",
            OpCode::Li32 => "li32",
            OpCode::Lf32 => "lf32",
            OpCode::Lf64 => "lf64",
            OpCode::Si8 => "si8",
            OpCode::Si16 => "si16",
            OpCode::Si32 => "si32",
            OpCode::Sf32 => "sf32",
            OpCode::Sf64 => "sf64",
            OpCode::NewFunction => "newfunction",
            OpCode::Call => "call",
            OpCode::Construct => "construct",
            OpCode::CallMethod => "callmethod",
            OpCode::CallStatic => "callstatic",
            OpCode::CallSuper => "callsuper",
            OpCode::CallProperty => "callproperty",
            OpCode::ReturnVoid => "returnvoid",
            OpCode::ReturnValue => "returnvalue",
            OpCode::ConstructSuper => "constructsuper",
            OpCode::ConstructProp => "constructprop",
            OpCode::CallPropLex => "callproplex",
            OpCode::CallSuperVoid => "callsupervoid",
            OpCode::CallPropVoid => "callpropvoid",
            OpCode::Sxi1 => "sxi1",
            OpCode::Sxi8 => "sxi8",
            OpCode::Sxi16 => "sxi16",
            OpCode::ApplyType => "applytype",
            OpCode::PushFloat4 => "pushfloat4",
            OpCode::NewObject => "newobject",
            OpCode::NewArray => "newarray",
            OpCode::NewActivation => "newactivation",
            OpCode::NewClass => "newclass",
            OpCode::GetDescendants => "getdescendants",
            OpCode::NewCatch => "newcatch",
            OpCode::FindPropstrict => "findpropstrict",
            OpCode::FindProperty => "findproperty",
            OpCode::FindDef => "finddef",
            OpCode::GetLex => "getlex",
            OpCode::SetProperty => "setproperty",
            OpCode::GetLocal => "getlocal",
            OpCode::SetLocal => "setlocal",
            OpCode::GetGlobalScope => "getglobalscope",
            OpCode::GetScopeObject => "getscopeobject",
            OpCode::GetProperty => "getproperty",
            OpCode::GetOuterScope => "getouterscope",
            OpCode::InitProperty => "initproperty",
            OpCode::DeleteProperty => "deleteproperty",
            OpCode::GetSlot => "getslot",
            OpCode::SetSlot => "setslot",
            OpCode::GetGlobalSlot => "getglobalslot",
            OpCode::SetGlobalSlot => "setglobalslot",
            OpCode::ConvertS => "convert_s",
            OpCode::EscXElem => "esc_xelem",
            OpCode::EscXAttr => "esc_xattr",
            OpCode::ConvertI => "convert_i",
            OpCode::ConvertU => "convert_u",
            OpCode::ConvertD => "convert_d",
            OpCode::ConvertB => "convert_b",
            OpCode::ConvertO => "convert_o",
            OpCode::CheckFilter => "checkfilter",
            OpCode::ConvertF => "convert_f",
            OpCode::UnPlus => "unplus",
            OpCode::ConvertF4 => "convert_f4",
            OpCode::Coerce => "coerce",
            OpCode::CoerceB => "coerce_b",
            OpCode::CoerceA => "coerce_a",
            OpCode::CoerceI => "coerce_i",
            OpCode::CoerceD => "coerce_d",
            OpCode::CoerceS => "coerce_s",
            OpCode::AsType => "astype",
            OpCode::AsTypeLate => "astypelate",
            OpCode::CoerceU => "coerce_u",
            OpCode::CoerceO => "coerce_o",
            OpCode::Negate => "negate",
            OpCode::Increment => "increment",
            OpCode::IncLocal => "inclocal",
            OpCode::Decrement => "decrement",
            OpCode::DecLocal => "declocal",
            OpCode::TypeOf => "typeof",
            OpCode::Not => "not",
            OpCode::BitNot => "bitnot",
            OpCode::Add => "add",
            OpCode::Subtract => "subtract",
            OpCode::Multiply => "multiply",
            OpCode::Divide => "divide",
            OpCode::Modulo => "modulo",
            OpCode::LShift => "lshift",
            OpCode::RShift => "rshift",
            OpCode::UrShift => "urshift",
            OpCode::BitAnd => "bitand",
            OpCode::BitOr => "bitor",
            OpCode::BitXor => "bitxor",
            OpCode::Equals => "equals",
            OpCode::StrictEquals => "strictequals",
            OpCode::LessThan => "lessthan",
            OpCode::LessEquals => "lessequals",
            OpCode::GreaterThan => "greaterthan",
            OpCode::GreaterEquals => "greaterequals",
            OpCode::InstanceOf => "instanceof",
            OpCode::IsType => "istype",
            OpCode::IsTypeLate => "istypelate",
            OpCode::In => "in",
            OpCode::IncrementI => "increment_i",
            OpCode::DecrementI => "decrement_i",
            OpCode::IncLocalI => "inclocal_i",
            OpCode::DecLocalI => "declocal_i",
            OpCode::NegateI => "negate_i",
            OpCode::AddI => "add_i",
            OpCode::SubtractI => "subtract_i",
            OpCode::MultiplyI => "multiply_i",
            OpCode::GetLocal0 => "getlocal0",
            OpCode::GetLocal1 => "getlocal1",
            OpCode::GetLocal2 => "getlocal2",
            OpCode::GetLocal3 => "getlocal3",
            OpCode::SetLocal0 => "setlocal0",
            OpCode::SetLocal1 => "setlocal1",
            OpCode::SetLocal2 => "setlocal2",
            OpCode::SetLocal3 => "setlocal3",
            OpCode::Debug => "debug",
            OpCode::DebugLine => "debugline",
            OpCode::DebugFile => "debugfile",
            OpCode::BkptLine => "bkptline",
        }
        .to_string()
    }
}

impl Display for OpCode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(&self.name())
    }
}
